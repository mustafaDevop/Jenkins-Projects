version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ""
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code heres
            # delete cloudformation stacks
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
        default: ""
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl https://kvdb.io/4Wka63AqoTHqb21bUQNxUz/migration_${CIRCLE_WORKFLOW_ID:0:7} --insecure)
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  test-image:
    docker:
      - image: alpine:3.12.0

    steps:
      - run:
          name: Install tar utility
          command: |
            # yum install -y tar gzip
            apk add --update tar gzip
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk update
      - run:
          name: Install python
          command: |
            # your code here
            apk add --update python3
      # install ansible
      - run:
          name: Install ansible
          command: |
            # your code here
            apk add --update ansible
      # install NodeJS and NPM
      - run:
          name: Install NodeJS and NPM
          command: |
            # your code here
            # apk add --update curl
            # curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            # apk add --update nodejs npm
            apk add nodejs-current npm
            node --version
            npm --version
      # install aws cli
      - run:
          name: Install aws cli
          command: |
            # your code here
            apk add --no-cache aws-cli

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - slack/notify:
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - slack/notify:
          event: fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: frontend-build
      # Your job code here
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: backend-build
      # Your job code here
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: frontend-build
      # Your job code here
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            
      - slack/notify:
          event: fail

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: backend-build
      # Your job code here
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:  yum install tar gzip -y
      - run:  
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-Backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              --parameter-overrides ID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine:3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "23:27:cb:9c:bc:c3:bd:3d:11:b6:3a:cd:91:fa:32:8e"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip aws-cli openssh
      - run:
          name: configure server
          command: |
            # Your code here
            pwd
            cd .circleci/ansible
            ls -al
            ansible-playbook -i inventory.txt  configure-server.yml
          no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to KVDB.io
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "4Wka63AqoTHqb21bUQNxUz" in your local terminal first
                curl --insecure https://kvdb.io/4Wka63AqoTHqb21bUQNxUz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.10-alpine:3.16
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no cache tar
            apk add --update --no cache gzip
            apk add --update --no cache nodejs
            apk add --update --no cache npm
            apk add --update --no cache aws-cli
            apk add --update --no cache curl
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10-alpine:3.12.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "23:27:cb:9c:bc:c3:bd:3d:11:b6:3a:cd:91:fa:32:8e"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache ansible tar gzip nodejs npm curl aws-cli
      - run:
          name: Deploy backend
          command: |
            # your code here
            pwd
            cd backend
            
            touch .env
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            
            pwd
            ls -al
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            
            cd .circleci/ansible
            
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id:  ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.10-alpine:3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm curl aws-cli
           
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            # your code here
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "${BACKEND_IP}"
            
            export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')
            
            echo $BACKEND
            export API_URL="http://${BACKEND}:3030"
            echo "API_URL=${API_URL}"
            
            echo "sleeping for 1minute"
            sleep 60
            
            # Currently the code isnt working LOCALLY and on CIRCLECI
            if curl -v "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            
            echo ${URL}
            
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install tar gzip -y
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \               
              list-exports ---query "Exports[?Name==\'WorkflowID\'].Value" \               
              --no-paginate --output text | grep -o '[^-]*$')             
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt             
            cat ~/project/OldWorkflowID.txt
      
  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                 --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            cat ~/project/OldWorkflowID.txt
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
      - run:
          name: Remove old stack workflow id
          command:  |
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${oldWorkflowID}" ]]
            then
              echo "Deleting old stack"
              echo "s3://udapeople-mustafa102-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive || true
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
            else
              echo "stack is the latest"
            fi
           

workflows:
  default:
    jobs:
      - test-image
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
# VS Code Extension Version: 1.5.0
